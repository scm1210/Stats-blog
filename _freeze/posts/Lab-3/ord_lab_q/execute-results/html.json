{
  "hash": "6f3de0c0fdb56e517f40745ac8d43e9e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Ordinal Regression Lab Answers\"\nsubtitle: \"Princeton University\"\nauthor: \"Steven Mesquiti\"\noutput: \n  tufte::tufte_html:\n    css: \n    tufte_variant: \"envisioned\"\n    highlight: github-dark\n    fig_height: 10\n    fig_width: 16\n    toc: true\n    toc_depth: 1\nexecute: \n  message: false\n  warning: false\nformat: html\nengine: knitr\n---\n\n\n\n# Lab 3- Ordinal Regression\n\n## Instructions\n\n-   If you are fitting a model, display the model output in a neatly formatted table. (The `tidy` and `kable` functions can help!)\n\n-   If you are creating a plot, use clear labels for all axes, titles, etc.\n\n-   If you are using Github, don't forget to commit and push your work to to it regularly, at least after each exercise. Write short and informative commit messages.\n    Else, if you are submitting on Canvas, make sure that the version you submit is the latest, and that it runs/knits without any errors. \n\n-   When you're done, we should be able to knit the final version of the QMD in your GitHub as a HTML.\n\n# Lab\n\nThe data for this week's lab is taken from the Great British Bake-off (GBBO, https://bakeoff.netlify.app/). In this lab you will be looking at `Gender` and `Age` as a predictor of technical rank. For this exercise, we will only be looking at those who were in top 3 of technical.\n\nIn the GBBO, the bakers are usually provided with a list of ingredients and basic instructions, but they may not have access to specific measurements or details on how to prepare the ingredients. The judges evaluate the bakers' finished products based on factors such as appearance, texture, and flavor, but also compare the bakers' results to a standard version of the recipe that has been prepared in advance by the judges or a baking expert.\n\nThe dataset contains 3 variables:\n\n-   `Gender`: M = MALE, F = FEMALE\n\n-   `Age`: Age of baker\n\n-   `Technical Rank`: Rank in technical (1,2,3)\n\n## Load packages:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pacman)\npacman::p_load(tidyverse, DT, broom, performance,\n               ordinal,car,ggeffects,gofact,brms,\n               emmeans,knirt,MASS,brant,\n               install = TRUE)\n\n\n#### define plot objects and stuff\n\npalette <- c(\n  \"#772e25\", \"#c44536\", \"#ee9b00\", \"#197278\", \"#283d3b\", \n  \"#9CC5A1\", \"#6195C6\", \"#ADA7C9\", \"#4D4861\", \"grey50\",\n  \"#d4a373\", \"#8a5a44\", \"#4a6a74\", \"#5c80a8\", \"#a9c5a0\",\n  \"#7b9b8e\", \"#e1b16a\", \"#a69b7c\", \"#9d94c4\", \"#665c54\"\n)\n\npalette_condition = c(\"#ee9b00\", \"#c44536\",\"#005f73\", \"#283d3b\", \"#9CC5A1\", \"#6195C6\", \"#ADA7C9\", \"#4D4861\")\n\nplot_aes = theme_minimal() +\n  theme(\n    legend.position = \"top\",\n    legend.text = element_text(size = 12),\n    text = element_text(size = 16, family = \"Futura Medium\"),\n    axis.text = element_text(color = \"black\"),\n    axis.ticks.y = element_blank(),\n    plot.title = element_text(size = 20, hjust = 0.5) # Adjusted title size and centering\n  )\n```\n:::\n\n\n\n## Load data\n\n-   Make sure only the top 3 ranks are being used. *For some reason, there are missing ranks (my guess is they did not announce rank on TV)*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngbbo <- read_csv(\"https://raw.githubusercontent.com/suyoghc/PSY-504_Spring-2025/refs/heads/main/Ordinal%20Regression/data/GBBO.csv\")\n\n# Enter code to filter. Think about the data type that would be relevant for Rank\n# gb <- ....\n\n### only use the the first three ranks \ndata = gbbo |> \n  rename(Technical_Rank = `Technical Rank`) |> \n  filter(Technical_Rank < 4) |> \n  mutate(Technical_Rank = factor(Technical_Rank, levels = c(1, 2, 3), ordered = TRUE),\n         Gender = factor(Gender)) \n```\n:::\n\n\n\n## Explore\n\n-   Plot two figures showing the percentage of bakers in each rank--- create one for `Gender` and `Age`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngb <- data %>% \n  mutate(AgeGroup = cut(Age, \n                        breaks = seq(floor(min(Age, na.rm = TRUE)), ceiling(max(Age, na.rm = TRUE)), by = 10),\n                        include.lowest = TRUE, right = FALSE))\n\n# Compute percentages by Age Group\nage_rank <- gb %>%\n  group_by(AgeGroup, `Technical_Rank`) %>%\n  summarise(n = n(), .groups = 'drop') %>%\n  mutate(perc = n / sum(n) * 100)\n\n# Compute percentages by Gender\ngender_rank <- gb %>%\n  group_by(Gender, `Technical_Rank`) %>%\n  summarise(n = n(), .groups = 'drop') %>%\n  mutate(perc = n / sum(n) * 100)\n\n# Plot for Age Group\nggplot(age_rank, aes(x = AgeGroup, y = perc, fill = factor(`Technical_Rank`))) +\n  geom_bar(stat = \"identity\", position = position_dodge(width = 0.8)) +\n  scale_y_continuous(labels = scales::percent_format(scale = 1)) +\n  scale_fill_manual(values = palette_condition) +\n  labs(title = \"Percentage of Bakers in Each Technical Rank by Age Group\",\n       x = \"Age Group\",\n       y = \"Percentage\",\n       fill = \"Technical Rank\") +\n  plot_aes +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](Lab-3-figs/fig_plot-by-rank-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Plot for Gender\nggplot(gender_rank, aes(x = Gender, y = perc, fill = factor(`Technical_Rank`))) +\n  geom_bar(stat = \"identity\", position = position_dodge(width = 0.8)) +\n  scale_y_continuous(labels = scales::percent_format(scale = 1)) +\n  scale_fill_manual(values = palette_condition) +\n  labs(title = \"Percentage of Bakers in Each Technical Rank by Gender\",\n       x = \"Gender\",\n       y = \"Percentage\",\n       fill = \"Technical Rank\") +\n  plot_aes \n```\n\n::: {.cell-output-display}\n![](Lab-3-figs/fig_plot-by-rank-2.png){width=672}\n:::\n:::\n\n\n\n## Ordinal Analysis\n\n-   If you haven't already, convert the outcome variable to an ordered factor. What does the order here represent?\n\n```\ndata = gbbo |> \n  rename(Technical_Rank = `Technical Rank`) |> \n  filter(Technical_Rank < 4) |> \n  mutate(Technical_Rank = factor(Technical_Rank, levels = c(1, 2, 3), ordered = TRUE),\n  Gender = factor(Gender)) \n\n```\n\n> The order represents their placement in a technical bake-off. \n\n-   Convert input variables to categorical factors as appropriate.\n\n```\n# Factorizing gender\nGender = factor(Gender)\n```\n\n-   Run a ordinal logistic regression model against all relevant input variables. Interpret the effects for `Gender`, `Age` and `Gender*Age` (even if they are non-significant).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit the ordinal logistic regression model\nmodel <- clm(`Technical_Rank` ~ Gender * Age, data = gb)\n\n# Extract results with 95% confidence intervals\nresults <- tidy(model, conf.int = TRUE) %>%\n  rename(Estimate = estimate, `Lower CI` = conf.low, `Upper CI` = conf.high) %>%\n  mutate(\n    Estimate = round(Estimate, 3),\n    `Lower CI` = round(`Lower CI`, 3),\n    `Upper CI` = round(`Upper CI`, 3),\n    p.value = round(2 * (1 - pnorm(abs(statistic))), 3)  # Compute p-values manually and round\n  )\n\n# Display results in an interactive DT table\ndatatable(results, \n          options = list(pageLength = 5, scrollX = TRUE),\n          caption = \"Ordinal Logistic Regression Results with 95% Confidence Intervals\")\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-071b77a100768e1e1443\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-071b77a100768e1e1443\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"caption\":\"<caption>Ordinal Logistic Regression Results with 95% Confidence Intervals<\\/caption>\",\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\"],[\"1|2\",\"2|3\",\"GenderM\",\"Age\",\"GenderM:Age\"],[-1.417,0.005,-1.149,-0.023,0.039],[0.4596016024599287,0.4520428108457339,0.6729011260921147,0.01245869583929534,0.01853159013298677],[-3.082434754810774,0.01093737866762808,-1.708233688445169,-1.854734067628221,2.09303930236329],[0.002,0.991,0.08799999999999999,0.064,0.036],[null,null,-2.477,-0.048,0.003],[null,null,0.165,0.001,0.075],[\"intercept\",\"intercept\",\"location\",\"location\",\"location\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>term<\\/th>\\n      <th>Estimate<\\/th>\\n      <th>std.error<\\/th>\\n      <th>statistic<\\/th>\\n      <th>p.value<\\/th>\\n      <th>Lower CI<\\/th>\\n      <th>Upper CI<\\/th>\\n      <th>coef.type<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":5,\"scrollX\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[2,3,4,5,6,7]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"term\",\"targets\":1},{\"name\":\"Estimate\",\"targets\":2},{\"name\":\"std.error\",\"targets\":3},{\"name\":\"statistic\",\"targets\":4},{\"name\":\"p.value\",\"targets\":5},{\"name\":\"Lower CI\",\"targets\":6},{\"name\":\"Upper CI\",\"targets\":7},{\"name\":\"coef.type\",\"targets\":8}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[5,10,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n\n```{.r .cell-code}\nsummary(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nformula: Technical_Rank ~ Gender * Age\ndata:    gb\n\n link  threshold nobs logLik  AIC    niter max.grad cond.H \n logit flexible  309  -336.64 683.28 3(0)  4.04e-08 1.1e+05\n\nCoefficients:\n            Estimate Std. Error z value Pr(>|z|)  \nGenderM     -1.14947    0.67290  -1.708   0.0876 .\nAge         -0.02311    0.01246  -1.855   0.0636 .\nGenderM:Age  0.03879    0.01853   2.093   0.0363 *\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nThreshold coefficients:\n     Estimate Std. Error z value\n1|2 -1.416692   0.459602  -3.082\n2|3  0.004944   0.452043   0.011\n```\n\n\n:::\n:::\n\n\n\n-   Test if the interaction is warranted\n\n#Hint: You need to create two models with clm(); one with interaction and one without.\n#Then you compare them using the anova test using anova()\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    model_interaction <- clm(`Technical_Rank` ~ Gender * Age, data = gb)\n    \n    # Fit the model without the interaction term\n    model_main <- clm(`Technical_Rank` ~ Gender + Age, data = gb)\n    \n    # Compare the two models using ANOVA\n    anova_results <- anova(model_main, model_interaction)\n    anova_results\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    Likelihood ratio tests of cumulative link models:\n     \n                      formula:                      link: threshold:\n    model_main        Technical_Rank ~ Gender + Age logit flexible  \n    model_interaction Technical_Rank ~ Gender * Age logit flexible  \n    \n                      no.par    AIC  logLik LR.stat df Pr(>Chisq)  \n    model_main             4 685.72 -338.86                        \n    model_interaction      5 683.28 -336.64   4.437  1    0.03517 *\n    ---\n    Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n    ```\n    \n    \n    :::\n    :::\n\n\n    \n> we should use the interaction term since th emodel has significantly better fit\n\n\n-   Use `ggemmeans` to create a figure showing the interaction between `Gender` and `Age` as a function of rank. Plot predicted probabilities from the model.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreds <- ggemmeans(model_interaction, terms = c(\"Age\", \"Gender\"), type = \"fixed\")\n\nggplot(preds, aes(x = x, y = predicted, color = group, fill = group)) +\n  geom_line(size = 1) +  \n  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, linetype = \"dashed\") +  \n  facet_wrap(~response.level, scales = \"free_y\") +  \n  labs(title = \"Predicted Probability of Technical Rank by Age and Gender\",\n       x = \"Age\",\n       y = \"Predicted Probability\",\n       color = \"Gender\",\n       fill = \"Gender\") +  \n  scale_color_manual(values = palette) +  \n  scale_fill_manual(values = palette) +  \n  plot_aes\n```\n\n::: {.cell-output-display}\n![](Lab-3-figs/fig_unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n### Latent Visualization\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nols_clm = MASS::polr(Technical_Rank~Gender*Age, data=gb)\n\nggeffect(ols_clm, c(\"Age[all]\", \"Gender\"), latent=TRUE) %>% plot() +  scale_color_manual(values = palette) +  \n  scale_fill_manual(values = palette) +  plot_aes \n```\n\n::: {.cell-output-display}\n![](Lab-3-figs/fig_unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n-   Use the Brant test to support or reject the hypothesis that the proportional odds assumption holds for your simplified model.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbrant(ols_clm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n-------------------------------------------- \nTest for\tX2\tdf\tprobability \n-------------------------------------------- \nOmnibus\t\t1.29\t3\t0.73\nGenderM\t\t0.58\t1\t0.44\nAge\t\t0.06\t1\t0.8\nGenderM:Age\t0.92\t1\t0.34\n-------------------------------------------- \n\nH0: Parallel Regression Assumption holds\n```\n\n\n:::\n:::\n\n\n\n> We fail to rejecet it proportional odds assumption holds\n\n## `brms`\n\n-   Below is a model implementation using the `brms` package. We will just use the default priors for this. \nThe exercise is to run this code and note your observations. \nWhat are salient differences you observe in how the model fitting takes place\nWith respect to the results, how do you compare the results of the model you fit with `clm` and the one you fit with `brms`?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_path <- file.path(\"/Users/sm9518/Library/CloudStorage/GoogleDrive-sm9518@princeton.edu/My Drive/Classes/PSY-504/stevens-blog/posts/Lab-3/models/brms_model.rds\")\n\nif (!file.exists(model_path)) {\n  # If the RDS file does not exist, create the model\n  ols2_brm <- brm(Technical_Rank ~ Gender * Age, data = gb, \n                  family = cumulative, cores = 4, chains = 4)\n  \n  # Save the model output to an RDS file\n  saveRDS(ols2_brm, model_path)\n} else {\n  # If the RDS file already exists, load the data from it\n  ols2_brm <- readRDS(model_path)\n}\n```\n:::\n\n\n\n\n> The results are the same since we are using an uninformative prior and the estimates are similar to that of ML (frequentist estimations)\n\n-  The `conditional_effects` function is used to plot predicted probabilities by Gender and Age across each rank. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconditional_effects(ols2_brm, categorical = T)\n```\n\n::: {.cell-output-display}\n![](Lab-3-figs/fig_unnamed-chunk-10-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Lab-3-figs/fig_unnamed-chunk-10-2.png){width=672}\n:::\n:::\n\n\n\n- `check_predictions` from the `easystats` `performance` package is used for examining model fit (i.e., does the data fit the model being used?). \n\nRun the below code. What do you think?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_predictions(ols2_brm) |>  plot() + plot_aes\n```\n\n::: {.cell-output-display}\n![](Lab-3-figs/fig_unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n> Yes, the model appears to fit the data \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/datatables-binding-0.33/datatables.js\"></script>\n<script src=\"../../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../../site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"../../site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\n<link href=\"../../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}